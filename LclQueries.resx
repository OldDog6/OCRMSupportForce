<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DonorExistsQ" xml:space="preserve">
    <value>select count(ID) from ocrm.donors where ocrm.donors.ID =</value>
  </data>
  <data name="InsertCampaignRecord" xml:space="preserve">
    <value>insert into ocrm.campaigns values (@IDParam,@StartDateParam,@EndDateParam,@TypeParam)</value>
  </data>
  <data name="InsertDonorRecord" xml:space="preserve">
    <value>insert into ocrm.donors values(@IDPARAM, @NAMEPARAM, @PHONEPARAM, @EMAILPARAM, 
@ADDRPARAM, @CITYPARAM, @STATEPARAM, @ZIPPARAM, @HASDONATEDPARAM, @ISMAJORGIFTSPARAM, @DESCRIPTIONPARAM, @FIRSTNAMEPARAM, @EMAILOPTOUTPARAM, @LASTNAMEPARAM, @MIDDLENAMEPARAM, @MOBILEPHONEPARAM, @SALUTATIONPARAM, @TITLEPARAM, @WHYSUPPORTPARAM, @ANONYMOUSPARAM, @DECEASEDPARAM, @COMMPREFERENCEPARAM, @DELETEDPARAM, @TELEMARKETINGNOTESPARAM,@LASTDONATIONDATEPARAM, @CONSTITUENTIDPARAM, @ACCOUNTIDPARAM,@MATCHKEYPARAM)</value>
  </data>
  <data name="InsertMatchKeyRecord" xml:space="preserve">
    <value>INSERT into paymentsummary values (@MATCHKEYPARAM, @CALYEARPARAM, @TOTALDONATIONSPARAM)</value>
  </data>
  <data name="InsertPaymentRecord" xml:space="preserve">
    <value>Insert into ocrm.Payments
Values(@IDPARAM, @AMOUNTPARAM, @RECDATEPARAM,@FUNDIDPARAM,@DONORIDPARAM,@GIFTTYPEPARAM, @SOLICITORPARAM, @CAMPAIGNPARAM)</value>
  </data>
  <data name="LapsedDonorCountQ" xml:space="preserve">
    <value>select count(DISTINCT d.ID) 
from ocrm.donors d
where LastDonationDate &lt;= @ENDDATEPARAM and LastDonationDate &gt;= @BEGINDATEPARAM</value>
  </data>
  <data name="LapsedGivingQ" xml:space="preserve">
    <value>select 
(select max(Amount) from payments where donorId = @DONORIDPARAM) as LARGESTGIFT,
(select Amount from payments where donorId = @DONORIDPARAM 
order by Recieved_Date desc LIMIT 1) as LASTGIFT, 
(select count(Id) from Payments where donorId = @DONORIDPARAM) as FREQUENCY,
(Select sum(Amount) from payments where donorId = @DONORIDPARAM) as LIFETIMEGIVING,
(Select max(Solicitor) from payments where donorId = @DONORIDPARAM) as SOLICITOR</value>
  </data>
  <data name="LoadSolicitorContactsQ" xml:space="preserve">
    <value>SELECT ID, Internal_Solicitor__c FROM Contact
where Internal_Solicitor__c = '{0}'</value>
  </data>
  <data name="MatchkeyExistsQ" xml:space="preserve">
    <value>select count(matchkey) from paymentsummary where matchkey = '{0}' and calyear = {1}</value>
  </data>
  <data name="PaymentExistsQ" xml:space="preserve">
    <value>select count(ID) from ocrm.Payments where ID =  </value>
  </data>
  <data name="SelectLapsedDonors" xml:space="preserve">
    <value>select Id, Name, Salutation, FirstName, LastName, StreetAddress, City, State, ZipCode,
Phone, LastDonationDate, Telemarketing_Notes, MobilePhone, Causeview_ID from donors
where LastDonationDate &gt;= @BeginDateParam
and LastDonationDate &lt;= @EndDateParam LIMIT 100000</value>
  </data>
  <data name="UpdateCampaignRecord" xml:space="preserve">
    <value>update ocrm.campaigns
set StartDate = @StartDateParam,
EndDate = @EndDateParam,
Type = @TypeParam
where ID = @IDParam</value>
  </data>
  <data name="UpdateDonorRecord" xml:space="preserve">
    <value>update ocrm.donors
set Name = @NAMEPARAM,
Phone = @PHONEPARAM,
Email = @EMAILPARAM,
StreetAddress = @ADDRPARAM,
City = @CITYPARAM,
State = @STATEPARAM,
ZipCode = @ZIPPARAM,
IsDonor = @HASDONATEDPARAM, 
MajorGifts = @ISMAJORGIFTSPARAM, 
Description = @DESCRIPTIONPARAM, 
FirstName = @FIRSTNAMEPARAM, 
EmailOptOut = @EMAILOPTOUTPARAM, 
LastName = @LASTNAMEPARAM, 
MiddleName = @MIDDLENAMEPARAM, 
MobilePhone = @MOBILEPHONEPARAM, 
Salutation = @SALUTATIONPARAM, 
Title = @TITLEPARAM, 
WhySupport = @WHYSUPPORTPARAM, 
IsAnonymous = @ANONYMOUSPARAM, 
IsDeceased = @DECEASEDPARAM, 
CommunicationPreference = @COMMPREFERENCEPARAM, 
IsDeleted = @DELETEDPARAM, 
Telemarketing_Notes = @TELEMARKETINGNOTESPARAM,
Causeview_ID = @CONSTITUENTIDPARAM,
AccountID = @ACCOUNTIDPARAM, MATCHKEY = @MATCHKEYPARAM
WHERE Id = @IDPARAM</value>
  </data>
  <data name="UpdateMatchKeyRecord" xml:space="preserve">
    <value>Update paymentsummary set totaldonations = @TOTALDONATIONSPARAM where matchkey = @MATCHKEYPARAM and calyear = @CALYEARPARAM</value>
  </data>
  <data name="UpdatePaymentRecord" xml:space="preserve">
    <value>Update ocrm.Payments
set Amount = @AMOUNTPARAM,
Recieved_Date = @RECDATEPARAM,
FundID = @FUNDIDPARAM,
DonorID = @DONORIDPARAM,
Gift_Type = @GIFTTYPEPARAM,
Solicitor = @SOLICITORPARAM,
Campaign = @CAMPAIGNPARAM
Where ID = @IDPARAM</value>
  </data>
</root>